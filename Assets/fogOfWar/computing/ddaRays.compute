#pragma kernel CSMain

RWTexture2D<float4> map;
struct unit
{
	float2 pos;
	int height;
};
RWStructuredBuffer<unit> units;
RWStructuredBuffer<float2> normedOffs;
float radius;



float Nfloor(float a) { return floor(a) == a ? a - 1 : floor(a);}
float Nceil(float a) { return ceil(a) == a ? a + 1 : ceil(a);}

float nextDist(float off, float dir)
{
    float lim = dir > 0 ? Nceil(off) : Nfloor(off);
    return (lim - off) / dir;
}

void castRay(float2 off, float height, float2 curr)
{
    float dist = 0;
    float2 dir = off;
    while (dist < radius && map[curr].x <= height)
    {
        map[curr] = float4(map[curr].x, 1, 1, 0);
        float off = min(nextDist(curr.x, dir.x), nextDist(curr.y, dir.y));
        curr += dir * off;
        dist += off;
    }
}

void normalDDA(float2 unitOff, float height, float2 curr)  
{
	castRay(unitOff, height, curr);
	//float2 sDir = sign(unitOff);
	//float length = 0;
	//while (length <= radius && height >= map[curr].r)
	//{
	//	map[curr] = float4(map[curr].r, 1, 1, 0);
	//	float2 next = floor(curr) + sDir;
	//	float2 distToNext = (next - curr) / unitOff;
	//	float delta = min(distToNext.x, distToNext.y);
	//	curr += unitOff * delta;
	//	length += delta;
	//}
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float2 unitOff = normedOffs[id.y];
	float height = 0.1 * (float)units[id.x].height;
	float2 curr = units[id.x].pos;
	if(unitOff.x != 0 && unitOff.y != 0)
		normalDDA(unitOff, height, curr);
	else
	{
		for(float i = 0; i <= radius && height >= map[curr].r; i += 1)
		{
			map[curr] = float4(map[curr].r, 1, 1, 0);
			curr += unitOff;
		}
	}
	
}
