#pragma kernel CSMain

//units
struct unit
{
    float2 UVpos;
    int height;
    float viewRadius;
};
RWStructuredBuffer<unit> units;
int nbUnits;

//maps
RWTexture2D<float4> viewMap;
RWTexture2D<float4> terrainMap;

float Nfloor(float a) { return floor(a) == a ? a - 1 : floor(a);}
float Nceil(float a) { return ceil(a) == a ? a + 1 : ceil(a);}

float nextDist(float off, float dir)
{
    float lim = dir > 0 ? Nceil(off) : Nfloor(off);
    return (lim - off) / dir;
}

void castRay(unit u, float2 end)
{
    float dist = 0;
    float2 curr = u.UVpos;
    float2 dir = normalize(end - curr);
    while (dist < u.viewRadius * 0.25 && terrainMap[curr].a <= (float)(u.height) / 10.0)
    {
        viewMap[curr] = 1.0;
        float off = min(nextDist(curr.x, dir.x), nextDist(curr.y, dir.y));
        curr += dir * off;
        dist += off;
    }
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    unit u = units[id.x];
    viewMap[u.UVpos] =  float4(1, 0, 0, 1);
    int Irad = (int)ceil(u.viewRadius);
    for(int i = -Irad / 2 - Irad % 2; i < Irad / 2 + Irad % 2; i++)
    {
         castRay(u, u.UVpos + float2((float)i, ceil(u.viewRadius/ 2.0)));
         castRay(u, u.UVpos + float2(ceil(u.viewRadius / 2.0), (float)i));
         castRay(u, u.UVpos + float2((float)i, -ceil(u.viewRadius / 2.0)));
         castRay(u, u.UVpos + float2(-ceil(u.viewRadius / 2.0), (float)i));
    }
    castRay(u, u.UVpos + float2(Irad / 2 + Irad % 2, ceil(u.viewRadius/ 2.0)));
}